dnl Process this file with autoconf to produce a configure script.
AC_INIT(darkice, 1.2)
AC_CONFIG_SRCDIR(src/DarkIce.cpp)
AM_CONFIG_HEADER(src/config.h)

AM_INIT_AUTOMAKE

AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL

dnl AC_STDC_HEADERS
AC_HAVE_HEADERS(errno.h fcntl.h stdio.h stdlib.h string.h unistd.h limits.h)
AC_HAVE_HEADERS(signal.h time.h sys/time.h sys/types.h sys/wait.h math.h)
AC_HAVE_HEADERS(netdb.h netinet/in.h sys/ioctl.h sys/socket.h sys/stat.h)
AC_HAVE_HEADERS(sched.h pthread.h termios.h)
AC_HAVE_HEADERS(sys/soundcard.h sys/audio.h sys/audioio.h)
AC_HEADER_SYS_WAIT()

AC_TYPE_PID_T()
AC_TYPE_SIZE_T()
AC_C_BIGENDIAN()

AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(rt, sched_getscheduler)

AC_CHECK_FUNC(getaddrinfo, AC_DEFINE(HAVE_GETADDRINFO, 1, [Does function getaddrinfo exist?] ))

dnl-----------------------------------------------------------------------------
dnl funky posix threads checking, thanks to
dnl Steven G. Johnson <stevenj@alum.mit.edu>
dnl and Alejandro Forero Cuervo <bachue@bachue.com>
dnl see http://www.gnu.org/software/ac-archive/htmldoc/acx_pthread.html
dnl-----------------------------------------------------------------------------
ACX_PTHREAD(, AC_MSG_ERROR( [pthread library not found] ))

SYSTEM_INCLUDE=/usr/include


dnl-----------------------------------------------------------------------------
dnl link the lame library if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(LAME_CFLAGS)
AC_SUBST(LAME_LIBS)

AC_ARG_WITH(lame,
[  --with-lame             use lame for encoding mp3 streams [yes] ],
    USE_LAME=${withval}, USE_LAME="yes" )
AC_ARG_WITH(lame-prefix,
[  --with-lame-prefix=DIR  alternate location for lame [/usr]
                              look for libraries in LAME-PREFIX/lib,
                              for headers in LAME-PREFIX/include],
    CONFIG_LAME_PREFIX="${withval}", CONFIG_LAME_PREFIX="/usr")

if test "x${USE_LAME}" = "xyes" ; then
    AC_MSG_CHECKING( [for lame library at ${CONFIG_LAME_PREFIX}] )
    LA_SEARCH_LIB( LAME_LIB_LOC, LAME_INC_LOC, libmp3lame.a libmp3lame.so, lame/lame.h,
                   ${CONFIG_LAME_PREFIX})
    if test "x${LAME_LIB_LOC}" != "x" ; then
        AC_DEFINE( HAVE_LAME_LIB, 1, [build with lame library] )
        if test "x${LAME_INC_LOC}" != "x${SYSTEM_INCLUDE}" ; then
            LAME_CFLAGS="-I${LAME_INC_LOC}"
        fi
        LAME_LIBS="-L${LAME_LIB_LOC} -lmp3lame"
        AC_MSG_RESULT( [found at ${CONFIG_LAME_PREFIX}] )
    else
        AC_MSG_WARN( [not found, building without lame])
    fi
else
    AC_MSG_RESULT( [building without lame] )
fi


PKG_PROG_PKG_CONFIG()


dnl-----------------------------------------------------------------------------
dnl link the ogg vorbis libraries if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(VORBIS_CFLAGS)
AC_SUBST(VORBIS_LIBS)

AC_ARG_WITH(vorbis,
[  --with-vorbis           use Ogg Vorbis for encoding vorbis streams [yes] ],
    USE_VORBIS=${withval}, USE_VORBIS="yes" )
if test "x${USE_VORBIS}" = "xyes" ; then
    AC_MSG_CHECKING( [for vorbis libraries] )
    PKG_CHECK_MODULES( [VORBIS], [ogg vorbis vorbisenc],
    [AC_DEFINE( HAVE_VORBIS_LIB, 1, [build with Ogg Vorbis library] )])
else
    AC_MSG_RESULT( [building without Ogg Vorbis] )
fi


dnl-----------------------------------------------------------------------------
dnl link the ogg / opus libraries if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(OPUS_CFLAGS)
AC_SUBST(OPUS_LIBS)

AC_ARG_WITH(opus,
[  --with-opus           use Ogg Opus for encoding opus streams [yes] ],
    USE_OPUS=${withval}, USE_OPUS="yes" )
if test "x${USE_OPUS}" = "xyes" ; then
    AC_MSG_CHECKING( [for opus libraries] )
    PKG_CHECK_MODULES( [OPUS], [ogg opus],
    [AC_DEFINE( HAVE_OPUS_LIB, 1, [build with Ogg Opus library] )])
else
    AC_MSG_RESULT( [building without Ogg Opus] )
fi

dnl-----------------------------------------------------------------------------
dnl link the faac library if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(FAAC_CFLAGS)
AC_SUBST(FAAC_LIBS)

AC_ARG_WITH(faac,
[  --with-faac             use faac for encoding AAC streams [yes] ],
    USE_FAAC=${withval}, USE_FAAC="yes" )
AC_ARG_WITH(faac-prefix,
[  --with-faac-prefix=DIR  alternate location for faac [/usr]
                              look for libraries in FAAC-PREFIX/lib,
                              for headers in FAAC-PREFIX/include],
    CONFIG_FAAC_PREFIX="${withval}", CONFIG_FAAC_PREFIX="/usr")

if test "x${USE_FAAC}" = "xyes" ; then
    AC_MSG_CHECKING( [for faac library at ${CONFIG_FAAC_PREFIX}] )
    LA_SEARCH_LIB( FAAC_LIB_LOC, FAAC_INC_LOC, libfaac.a libfaac.so, faac.h,
                   ${CONFIG_FAAC_PREFIX})
    if test "x${FAAC_LIB_LOC}" != "x" ; then
        AC_DEFINE( HAVE_FAAC_LIB, 1, [build with faac library] )
        if test "x${FAAC_INC_LOC}" != "x${SYSTEM_INCLUDE}" ; then
            FAAC_CFLAGS="-I${FAAC_INC_LOC}"
        fi
        FAAC_LIBS="-L${FAAC_LIB_LOC} -lfaac"
        AC_MSG_RESULT( [found at ${CONFIG_FAAC_PREFIX}] )
    else
        AC_MSG_WARN( [not found, building without faac])
    fi
else
    AC_MSG_RESULT( [building without faac] )
fi


dnl-----------------------------------------------------------------------------
dnl link the aacplus library if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(AACPLUS_CFLAGS)
AC_SUBST(AACPLUS_LIBS)

AC_ARG_WITH(aacplus,
[  --with-aacplus             use aacplus for encoding AAC HEv2 streams [yes] ],
    USE_AACPLUS=${withval}, USE_AACPLUS="yes" )

if test "x${USE_AACPLUS}" = "xyes" ; then
    AC_MSG_CHECKING( [for aacplus library] )
    PKG_CHECK_MODULES( [AACPLUS], [aacplus],
    [AC_DEFINE( HAVE_AACPLUS_LIB, 1, [build with aacplus library] )])
else
    AC_MSG_RESULT( [building without aacplus] )
fi


dnl-----------------------------------------------------------------------------
dnl link the twolame library if requested
dnl-----------------------------------------------------------------------------
AC_SUBST(TWOLAME_CFLAGS)
AC_SUBST(TWOLAME_LIBS)

AC_ARG_WITH(twolame,
[  --with-twolame             use twolame for encoding MP2 streams [yes] ],
    USE_TWOLAME=${withval}, USE_TWOLAME="yes" )

if test "x${USE_TWOLAME}" = "xyes" ; then
    AC_MSG_CHECKING( [for twolame library] )
    PKG_CHECK_MODULES( [TWOLAME], [twolame],
    [AC_DEFINE( HAVE_TWOLAME_LIB, 1, [build with twolame library] )])
else
    AC_MSG_RESULT( [building without twolame] )
fi


dnl-----------------------------------------------------------------------------
dnl make sure at least one of lame and vorbis present
dnl-----------------------------------------------------------------------------
if test "x${LAME_LIBS}" = "x" \
     -a "x${VORBIS_LIBS}" = "x" \
     -a "x${OPUS_LIBS}" = "x" \
     -a "x${FAAC_LIBS}" = "x" \
     -a "x${AACPLUS_LIBS}" = "x" \
     -a "x${TWOLAME_LIBS}" = "x"; then
    AC_MSG_ERROR([neither lame, Ogg Vorbis, opus, faac, aac+ nor twolame configured])
fi


dnl-----------------------------------------------------------------------------
dnl link ALSA sound system if requested 
dnl-----------------------------------------------------------------------------
AC_SUBST(ALSA_CFLAGS)
AC_SUBST(ALSA_LIBS)

AC_ARG_WITH(alsa,
[  --with-alsa             use ALSA sound system [yes] ],
    USE_ALSA=${withval}, USE_ALSA="yes" )
if test "x${USE_ALSA}" = "xyes" ; then
    AC_MSG_CHECKING( [for alsa libraries] )
    PKG_CHECK_MODULES( [ALSA], [alsa],
    [AC_DEFINE( HAVE_ALSA_LIB, 1, [build with ALSA sound system] )])
else
    AC_MSG_RESULT( [building without ALSA support] )
fi


dnl-----------------------------------------------------------------------------
dnl link PULSEAUDIO sound system if requested 
dnl-----------------------------------------------------------------------------
AC_SUBST(PULSEAUDIO_CFLAGS)
AC_SUBST(PULSEAUDIO_LIBS)

AC_ARG_WITH(pulseaudio,
[  --with-pulseaudio             use PULSEAUDIO sound system [yes] ],
    USE_PULSEAUDIO=${withval}, USE_PULSEAUDIO="yes" )
if test "x${USE_PULSEAUDIO}" = "xyes" ; then
    AC_MSG_CHECKING( [for pulseaudio libraries] )
    PKG_CHECK_MODULES( [PULSEAUDIO], [libpulse-simple libpulse],
    [AC_DEFINE( HAVE_PULSEAUDIO_LIB, 1, [build with PULSEAUDIO sound system] )])
else
    AC_MSG_RESULT( [building without PULSEAUDIO support] )
fi


dnl-----------------------------------------------------------------------------
dnl link JACK sound server if requested 
dnl-----------------------------------------------------------------------------
AC_SUBST(JACK_CFLAGS)
AC_SUBST(JACK_LIBS)

AC_ARG_WITH(jack,
[  --with-jack             use JACK sound system [yes] ],
    USE_JACK=${withval}, USE_JACK="yes" )
if test "x${USE_JACK}" = "xyes" ; then
    AC_MSG_CHECKING( [for jack libraries at ${CONFIG_JACK_PREFIX}] )
    PKG_CHECK_MODULES( [JACK], [jack],
    [AC_DEFINE( HAVE_JACK_LIB, 1, [build with JACK audio server support] )])
else
    AC_MSG_RESULT( [building without JACK support] )
fi


dnl-----------------------------------------------------------------------------
dnl link Secret Rabbit Code (aka libsamplerate) if requested 
dnl-----------------------------------------------------------------------------
AC_SUBST(SRC_CFLAGS)
AC_SUBST(SRC_LIBS)

AC_ARG_WITH(samplerate,
[  --with-samplerate             use Secret Rabbit Code (aka libsamplerate) for samplerate conversion [yes] ],
    USE_SRC=${withval}, USE_SRC="yes" )
if test "x${USE_SRC}" = "xyes" ; then
    AC_MSG_CHECKING( [for samplerate libraries] )
    PKG_CHECK_MODULES( [SRC], [samplerate],
    [AC_DEFINE( HAVE_SRC_LIB, 1, [build with samplerate conversion through libsamplerate] )])
else
    AC_MSG_RESULT( [building without libsamplerate support] )
fi

AM_CONDITIONAL(HAVE_SRC_LIB, test "x${SRC_LIBS}" != "x")
dnl-----------------------------------------------------------------------------
dnl check for MSG_NOSIGNAL for the send() function in libsocket
dnl-----------------------------------------------------------------------------
AC_MSG_CHECKING(for MSG_NOSIGNAL)
AC_TRY_COMPILE([#include <sys/socket.h>], [
    int f = MSG_NOSIGNAL;
], [
    # Yes, we have it...
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_MSG_NOSIGNAL, 1, [use MSG_NOSIGNAL for send()])
], [
    # We'll have to use signals
    AC_MSG_RESULT(no)
])


dnl-----------------------------------------------------------------------------
dnl check for POSIX real-time scheduling
dnl-----------------------------------------------------------------------------
AC_CHECK_FUNCS( sched_getscheduler sched_getparam )


dnl-----------------------------------------------------------------------------
dnl enable compilation with debug flags
dnl-----------------------------------------------------------------------------
AC_SUBST(DEBUG_CXXFLAGS)

AC_ARG_WITH(debug,
[  --with-debug            enable debug mode [no] ],
    USE_DEBUG=${withval}, USE_DEBUG="no" )
    
if test "x${USE_DEBUG}" == "xyes" ; then
    DEBUG_CXXFLAGS="-g"
    AC_MSG_RESULT([compiling in debug mode])
else
    AC_MSG_RESULT([not compiling in debug mode])
fi


AC_OUTPUT(Makefile src/Makefile man/Makefile)

